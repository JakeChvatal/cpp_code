public static CSRMatrix[] decompose(CSRMatrix A){
        int[] diag_di=new int[A.getI().length];
        int[] diag_tempj=new int[diag_di.length-1];
        int[] diag_tempd=new int[diag_di.length-1];
        int diag_count=0;
        
        int[] low_di=new int[A.getI().length];
        int[] low_tempj=new int[(low_di.length*low_di.length)/2];
        int[] low_tempd=new int[(low_di.length*low_di.length)/2];
        int low_count=0;
        
        int[] up_di=new int[A.getI().length];
        int[] up_tempj=new int[(up_di.length*up_di.length)/2];
        int[] up_tempd=new int[(up_di.length*up_di.length)/2];
        int up_count=0;
        
        for(int i=0;i<diag_di.length-1;i++){
            int n0=A.getI()[i];
            int n1=A.getI()[i+1];
            for(int k=n0;k<n1;k++){
                int j=A.getJ()[k];
                if(i>j){
                    low_di[i+1]++;
                    low_tempj[low_count]=j;
                    low_tempd[low_count]=A.getD()[k];
                    low_count++;
                }                
                if(i==j){
                    diag_di[i+1]++;
                    diag_tempj[diag_count]=j;
                    diag_tempd[diag_count]=A.getD()[k];
                    diag_count++;
                }
                if(i<j){
                    up_di[i+1]++;
                    up_tempj[up_count]=j;
                    up_tempd[up_count]=A.getD()[k];
                    up_count++;
                }
            }
        }
        for(int i=0;i<diag_di.length-1;i++){
            diag_di[i+1]+=diag_di[i];
        }
        int[] diag_dd=new int[diag_di[diag_di.length-1]];
        for(int i=0;i<diag_di[diag_di.length-1];i++){
            diag_dd[i]+=diag_tempd[i];
        }
        int[] diag_dj=new int[diag_di[diag_di.length-1]];
        for(int i=0;i<diag_di[diag_di.length-1];i++){
            diag_dj[i]+=diag_tempj[i];
        }CSRMatrix D = new CSRMatrix(diag_di,diag_dj,diag_dd);
        
        
        for(int i=0;i<low_di.length-1;i++){
            low_di[i+1]+=low_di[i];
        }
        int[] low_dd=new int[low_di[low_di.length-1]];
        for(int i=0;i<low_di[low_di.length-1];i++){
            low_dd[i]+=low_tempd[i];
        }
        int[] low_dj=new int[low_di[low_di.length-1]];
        for(int i=0;i<low_di[low_di.length-1];i++){
            low_dj[i]+=low_tempj[i];
        }
        CSRMatrix L = new CSRMatrix(low_di,low_dj,low_dd);
        
        
        for(int i=0;i<up_di.length-1;i++){
            up_di[i+1]+=up_di[i];
        }
        int[] up_dd=new int[up_di[up_di.length-1]];
        for(int i=0;i<up_di[up_di.length-1];i++){
            up_dd[i]+=up_tempd[i];
        }
        int[] up_dj=new int[up_di[up_di.length-1]];
        for(int i=0;i<up_di[up_di.length-1];i++){
            up_dj[i]+=up_tempj[i];
        }
        CSRMatrix U = new CSRMatrix(up_di,up_dj,up_dd);
        
        
        CSRMatrix[] name=new CSRMatrix[3];
        name[0]=D;
        name[1]=L;
        name[2]=U;
        return name;
    }
